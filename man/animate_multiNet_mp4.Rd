% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/animate_multiNet_mp4.R
\name{animate_multiNet_mp4}
\alias{animate_multiNet_mp4}
\title{Animate multilayer networks to GIF/MP4 (one layer = one frame):}
\usage{
animate_multiNet_mp4(
  net,
  communities = NULL,
  layer_order = NULL,
  layout = c("kamadakawai", "mds", "circle"),
  actor_normalize = c("strip_version", "trim", "tolower"),
  format = c("gif", "mp4"),
  fps = 12,
  frames_per_layer = 12,
  width = 1000,
  height = 800,
  edge.col = "#555555",
  edge.alpha = 0.5,
  point.size = 2.5,
  show.labels = FALSE,
  results_dir = getOption("mlnet.results_dir", "omicsDNA_results"),
  file = NULL,
  seed = NULL,
  verbose = TRUE
)
}
\arguments{
\item{net}{A multilayer object usable with multinet::layers_ml() and edges_ml().}

\item{communities}{Optional data.frame with columns \code{actor}, \code{layer}, and either
\code{com} or \code{cid} (if only \code{cid}, labels \code{com = paste0("C", cid)} are generated).}

\item{layer_order}{Optional character vector to specify the order of layers in the animation.
Default: order returned by layers_ml(net).}

\item{layout}{One of c("kamadakawai","mds","circle"). Default "kamadakawai".}

\item{actor_normalize}{Character vector of normalization steps used to match
community actor IDs to network actors. Default c("strip_version","trim","tolower").}

\item{format}{Output format: "gif" (default) or "mp4".}

\item{fps}{Frames per second (default 12).}

\item{frames_per_layer}{How many frames to allocate to each layer state (default 12).
Higher values slow the animation and give longer dwell time.}

\item{width, height}{Output size in \emph{pixels} (default 1000 x 800).}

\item{edge.col}{Edge colour (hex or name). Default "#555555".}

\item{edge.alpha}{Edge transparency in \link{0,1} (default 0.5).}

\item{point.size}{Node point size (default 2.5).}

\item{show.labels}{Logical; draw node labels. Default FALSE.}

\item{results_dir}{Output directory (default getOption("mlnet.results_dir","omicsDNA_results")).}

\item{file}{Optional filename. If NULL, an auto-stamped name is used under results_dir.
If you pass a relative path, it will be placed under results_dir.}

\item{seed}{Optional integer seed for reproducible layouts.}

\item{verbose}{Logical; print progress.}
}
\value{
Invisibly returns a list with:
\itemize{
\item \code{file}: absolute path to the rendered GIF/MP4,
\item \code{layers}: the layer order used,
\item \code{anim}: the gganimate object (so you can re-render with different parameters).
}
}
\description{
Builds a consistent 2D layout from the union of all layers (so node positions
are stable), then renders a frame for each layer and animates transitions.
If a communities table is provided (\code{actor}, \code{layer}, and \code{com} or \code{cid}),
nodes are coloured by community per layer; otherwise they are drawn uniformly.
}
\examples{
\dontrun{
gif <- animate_multiNet_mp4(net, communities = comm, format = "gif")
mp4 <- animate_multiNet_mp4(net, communities = comm, format = "mp4", fps = 15)
}
}
