% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/annotateCom.R
\name{annotateCom}
\alias{annotateCom}
\title{Annotate multilayer community rows with a node attribute (pure data-frame join):}
\usage{
annotateCom(
  communities,
  nodesMetadata,
  featureID_col = "GeneName",
  attribute = "GeneType",
  actor_normalize = c("strip_version", "trim", "tolower"),
  fill_missing = "Unknown",
  write_csv = FALSE,
  results_dir = getOption("mlnet.results_dir", "omicsDNA_results"),
  output_basename = NULL,
  output_prefix = NULL,
  verbose = TRUE
)
}
\arguments{
\item{communities}{Data frame of community assignments. Must contain \code{actor}
(or \code{GeneName}, which will be copied into \code{actor}). Other columns are
preserved.}

\item{nodesMetadata}{Data frame containing the join key and the attribute to
merge (e.g., a gene annotation table).}

\item{featureID_col}{Character scalar; name of the identifier column in
\code{nodesMetadata} that corresponds to \code{communities$actor}. Default \code{"GeneName"}.}

\item{attribute}{Character scalar; name of the attribute column in
\code{nodesMetadata} to attach (e.g., \code{"GeneType"}).}

\item{actor_normalize}{Character vector of normalisation steps applied to both
sides before matching. Supported steps: \code{"strip_version"}, \code{"trim"},
\code{"tolower"}, \code{"toupper"}, \code{"rm_dash"}, \code{"rm_punct"}, \code{"alnum"}. Default
\code{c("strip_version","trim","tolower")}.}

\item{fill_missing}{Value used for unmatched rows; set \code{NULL} to leave \code{NA}.
Default \code{"Unknown"}.}

\item{write_csv}{Logical; if \code{TRUE}, write a timestamped CSV of the annotated
table to disk. Default \code{FALSE}.}

\item{results_dir}{Directory where the CSV is written when \code{write_csv = TRUE}.
Default \code{getOption("mlnet.results_dir", "omicsDNA_results")}.}

\item{output_basename}{Basename (without timestamp or extension) for the CSV.
If \code{NULL}, uses \code{paste0("communities_with_", attribute)}.}

\item{output_prefix}{Deprecated alias of \code{output_basename} (kept for backward
compatibility).}

\item{verbose}{Logical; print a coverage summary and, if applicable, the saved
file path. Default \code{TRUE}.}
}
\value{
The input \code{communities} with one new column named exactly as
\code{attribute} (e.g., \code{"GeneType"}). When \code{write_csv = TRUE}, the absolute file
path is also attached as \code{attr(x, "file")}. Coverage (fraction of
non‑missing, non‑empty annotations before filling) is reported to the console
when \code{verbose = TRUE}.
}
\description{
Add a node attribute (e.g., a gene annotation such as \code{"GeneType"}) to a
\strong{community assignment table} by matching actor IDs in \code{communities} to an
identifier column in \code{nodesMetadata}. The operation is \strong{metadata‑only}:
it never calls \pkg{multinet}; it normalises IDs, performs a vectorised join,
reports coverage, can fill unmatched rows with a sentinel value, and can write
the annotated table to a timestamped CSV under your project’s results folder.
}
\details{
\strong{Expected inputs}
\itemize{
\item \code{communities} must have an actor/ID column:
\itemize{
\item Preferably named \code{actor}; if absent, the function looks for \code{GeneName} and
copies it into \code{actor}. If neither is present, it errors.
\item Any other columns (e.g., \code{cid}, \code{com}, \code{layer}) are preserved verbatim.
}
\item \code{nodesMetadata} must provide:
\itemize{
\item a key column \code{featureID_col} (e.g., \code{"GeneName"}) whose values match
\code{communities$actor} \emph{after normalisation}, and
\item the attribute column \code{attribute} to be joined (e.g., \code{"GeneType"}).
}
}

\strong{How matching works}
\enumerate{
\item Both sides are normalised with \code{.normalize_keys()} using the sequence in
\code{actor_normalize} (default: \code{c("strip_version","trim","tolower")}).
\item \code{nodesMetadata} is deduplicated by the normalised key (first occurrence wins).
\item A vectorised \code{match()} maps community keys to metadata keys and collects
the corresponding attribute values.
\item If \code{fill_missing} is not \code{NULL}, unmatched values are replaced by this
sentinel (default \code{"Unknown"}).
}

\strong{Saving behaviour}
\itemize{
\item If \code{write_csv = TRUE}, the result is written to
\verb{file.path(getOption("mlnet.results_dir", "omicsDNA_results"), <basename>_<timestamp>.csv)}.
\item The file stem defaults to \code{paste0("communities_with_", attribute)} and can be
overridden via \code{output_basename} (or its alias \code{output_prefix} for
backward compatibility). A timestamp in the form \code{YYYY-mm-dd_HHMMSS} is appended.
}

\strong{Type note}
\itemize{
\item The appended attribute column is \strong{character} (internal coercion via
\code{as.character()}), even if the source column in \code{nodesMetadata} was numeric.
}
}
\examples{
\dontrun{
# Return-only (no file written)
comm_annot <- annotateCom(
  communities   = comm,
  nodesMetadata = genes_info,
  featureID_col = "GeneName",
  attribute     = "GeneType"
)

# Write a CSV into your project results folder
# options(mlnet.results_dir = "/path/to/results")
comm_annot <- annotateCom(
  communities     = comm,
  nodesMetadata   = genes_info,
  featureID_col   = "GeneName",
  attribute       = "GeneType",
  write_csv       = TRUE,
  output_basename = "communities_with_GeneType"
)

# Backward-compatible alias (same as output_basename)
comm_annot <- annotateCom(
  communities   = comm,
  nodesMetadata = genes_info,
  featureID_col = "GeneName",
  attribute     = "GeneType",
  write_csv     = TRUE,
  output_prefix = "communities_with_GeneType"
)
}

}
\seealso{
\code{\link{add_network_attributes}} for attaching attributes inside a
\pkg{multinet} object; \code{\link{build_multiNet}} for assembling layers.
}
