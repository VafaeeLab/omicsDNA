% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/network_attributes.R
\name{network_attributes}
\alias{network_attributes}
\title{Print a report of attributes in a \code{multinet::ml.network}}
\usage{
network_attributes(net, show_examples = TRUE, show_max = 10, verbose = TRUE)
}
\arguments{
\item{net}{A \code{multinet::ml.network} object with attributes attached.}

\item{show_examples}{Logical; also print a few example values for each class
of attributes (actors/edges). Default \code{TRUE}.}

\item{show_max}{Integer; maximum number of names/rows to print in each
section. Default \code{10}.}

\item{verbose}{Logical; print the report to the console. Default \code{TRUE}.}
}
\value{
(Invisibly) a list with elements:
\itemize{
\item \code{added} — what was added per the stored reports:
\itemize{
\item \code{actor_attrs} (may be \code{NULL} if not recorded),
\item \code{edge_attrs} (character vector, if recorded),
\item \code{reports} (the raw \code{actor_match_report} / \code{edge_attach_report}).
}
\item \code{present} — what is currently present on the object:
\itemize{
\item \code{actor} — data.frame with \code{name} and \code{type} (or inferred types),
\item \code{edge}  — data.frame with \code{name} and \code{type} (or inferred types),
\item \code{network} — data.frame of network‑level attributes (if available).
}
\item \code{samples} — small tibbles with example rows for actors/edges if requested.
}
}
\description{
Prints a human‑readable summary of:
\itemize{
\item \strong{Which attributes were added} (if available from the attachment reports
stored by \code{add_network_attributes()}), and
\item \strong{What attributes are currently present} on \strong{actors (nodes)}, \strong{edges},
and (if supported by your multinet version) \strong{network‑level} attributes.
}

The function is defensive across multinet versions:
\itemize{
\item It tries \code{attributes_ml(net, target = "actor"/"edge")}; if unavailable,
it infers attribute names from \code{actors_ml(net, attributes = TRUE)} and
\code{edges_ml(net, attributes = TRUE)} by subtracting the canonical ID columns.
\item For edges, it recognizes many possible column names for endpoints and
layer columns, and reports the \strong{extra columns} as edge attributes.
}
}
\examples{
\dontrun{
# After you call add_network_attributes(...):
rep <- report_network_attributes(net, show_examples = TRUE, show_max = 8)

# Programmatic access
rep$added$edge_attrs
rep$present$actor
rep$samples$edges
}
}
